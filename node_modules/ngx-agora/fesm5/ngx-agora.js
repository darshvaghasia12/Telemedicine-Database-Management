import * as agoraSDK from 'agora-rtc-sdk';
import { Inject, Injectable, Component, NgModule, defineInjectable, inject } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Provides access to the Agora web API, including the AgoraRTC and Client objects.
 */
var NgxAgoraService = /** @class */ (function () {
    function NgxAgoraService(config) {
        this.config = config;
        /**
         * All audio devices collected from the AgoraRTC `getDevices()` method.
         * @see [getDevices()](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#getdevices)
         *
         */
        this.audioDevices = [];
        /**
         * All video devices collected from the AgoraRTC `getDevices()` method.
         * @see [getDevices()](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#getdevices)
         */
        this.videoDevices = [];
        /**
         * Instance reference to the `static` AgoraRTC library object.
         */
        this.AgoraRTC = NgxAgoraService.AgoraRTC;
        if (!this.checkSystemRequirements()) {
            this.AgoraRTC.Logger.error('Web RTC is not supported in this browser');
        }
        else {
            this.collectDevices();
        }
    }
    /**
     * Checks the Web Browser Compatibility
     *
     * This method checks the compatibility between the Web SDK and the current web browser.
     * Use this method before calling createClient to check the compatibility between the system and the web browser.
     *
     * - true: The Web SDK is compatible with the current web browser.
     * - false: The Web SDK is not compatible with the current web browser.
     *
     * @remark
     * Agora has yet to conduct comprehensive tests on Chromium kernel browsers, such as QQ and 360.
     * Agora will gradually achieve compatibility on most mainstream browsers in subsequent versions of the Web SDK.
     */
    /**
     * Checks the Web Browser Compatibility
     *
     * This method checks the compatibility between the Web SDK and the current web browser.
     * Use this method before calling createClient to check the compatibility between the system and the web browser.
     *
     * - true: The Web SDK is compatible with the current web browser.
     * - false: The Web SDK is not compatible with the current web browser.
     *
     * \@remark
     * Agora has yet to conduct comprehensive tests on Chromium kernel browsers, such as QQ and 360.
     * Agora will gradually achieve compatibility on most mainstream browsers in subsequent versions of the Web SDK.
     * @return {?}
     */
    NgxAgoraService.prototype.checkSystemRequirements = /**
     * Checks the Web Browser Compatibility
     *
     * This method checks the compatibility between the Web SDK and the current web browser.
     * Use this method before calling createClient to check the compatibility between the system and the web browser.
     *
     * - true: The Web SDK is compatible with the current web browser.
     * - false: The Web SDK is not compatible with the current web browser.
     *
     * \@remark
     * Agora has yet to conduct comprehensive tests on Chromium kernel browsers, such as QQ and 360.
     * Agora will gradually achieve compatibility on most mainstream browsers in subsequent versions of the Web SDK.
     * @return {?}
     */
    function () {
        return this.AgoraRTC.checkSystemRequirements();
    };
    /**
     * Creates a Client object.
     *
     * This method creates and returns a client object. You can only call this method once each call session.
     *
     * @param config
     * Defines the property of the client, see
     * [ClientConfig](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html) for details.
     * @param [autoInitializing=true] Ngx-agora by default automatically initializes the client with the provided `AppID` after it is created.
     * Set this property to `false` to disable this functionality, if you are going to call `init()` separately
     * (after creating the client only).
     * @param [onSuccess] The callback when the method succeeds.
     * @param [onFailure] The callback when the method fails.
     *
     * @example
     * AgoraRTC.createClient(config);
     */
    /**
     * Creates a Client object.
     *
     * This method creates and returns a client object. You can only call this method once each call session.
     *
     * \@example
     * AgoraRTC.createClient(config);
     * @param {?} config
     * Defines the property of the client, see
     * [ClientConfig](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html) for details.
     * @param {?=} autoInitializing
     * @param {?=} onSuccess
     * @param {?=} onFailure
     * @return {?}
     */
    NgxAgoraService.prototype.createClient = /**
     * Creates a Client object.
     *
     * This method creates and returns a client object. You can only call this method once each call session.
     *
     * \@example
     * AgoraRTC.createClient(config);
     * @param {?} config
     * Defines the property of the client, see
     * [ClientConfig](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html) for details.
     * @param {?=} autoInitializing
     * @param {?=} onSuccess
     * @param {?=} onFailure
     * @return {?}
     */
    function (config, autoInitializing, onSuccess, onFailure) {
        if (autoInitializing === void 0) { autoInitializing = true; }
        this.client = this.AgoraRTC.createClient(config);
        if (autoInitializing) {
            this.init(this.config.AppID, onSuccess, onFailure);
        }
        return this.client;
    };
    /**
     * This method creates and returns a stream object.
     *
     * @example
     * AgoraRTC.createStream(spec)
     *
     * @param spec Defines the properties of the stream
     * @see [StreamSpec](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.streamspec.html) for details.
     */
    /**
     * This method creates and returns a stream object.
     *
     * \@example
     * AgoraRTC.createStream(spec)
     *
     * @see [StreamSpec](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.streamspec.html) for details.
     * @param {?} spec Defines the properties of the stream
     * @return {?}
     */
    NgxAgoraService.prototype.createStream = /**
     * This method creates and returns a stream object.
     *
     * \@example
     * AgoraRTC.createStream(spec)
     *
     * @see [StreamSpec](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.streamspec.html) for details.
     * @param {?} spec Defines the properties of the stream
     * @return {?}
     */
    function (spec) {
        if (!spec.microphoneId && this.audioDevices && this.audioDevices.length) {
            /** @type {?} */
            var defaultMic = this.audioDevices[0].deviceId;
            spec.microphoneId = defaultMic;
        }
        if (!spec.cameraId && this.videoDevices && this.videoDevices.length) {
            /** @type {?} */
            var defaultCamera = this.videoDevices[0].deviceId;
            spec.cameraId = spec.cameraId || defaultCamera;
        }
        return this.AgoraRTC.createStream(spec);
    };
    /**
     * Initializes the Client object.
     *
     * @param appId Pass in the App ID for your project.
     * ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.
     * To get your App ID,
     * @see [Get an App ID](https://docs.agora.io/en/Video/web_prepare?platform=Web#create-an-agora-account-and-get-an-app-id).
     * @param [onSuccess] The callback when the method succeeds.
     * @param [onFailure] The callback when the method fails.
     *
     * @example
     * this.ngxAgoraService.client.init(appId, () => {
     * console.log("client initialized");
     * // Join a channel
     * //……
     * }, error => {
     *     console.log("client init failed ", err);
     *     // Error handling
     * });
     */
    /**
     * Initializes the Client object.
     *
     * @see [Get an App ID](https://docs.agora.io/en/Video/web_prepare?platform=Web#create-an-agora-account-and-get-an-app-id).
     * \@example
     * this.ngxAgoraService.client.init(appId, () => {
     * console.log("client initialized");
     * // Join a channel
     * //……
     * }, error => {
     *     console.log("client init failed ", err);
     *     // Error handling
     * });
     * @param {?} appId Pass in the App ID for your project.
     * ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.
     * To get your App ID,
     * @param {?=} onSuccess
     * @param {?=} onFailure
     * @return {?}
     */
    NgxAgoraService.prototype.init = /**
     * Initializes the Client object.
     *
     * @see [Get an App ID](https://docs.agora.io/en/Video/web_prepare?platform=Web#create-an-agora-account-and-get-an-app-id).
     * \@example
     * this.ngxAgoraService.client.init(appId, () => {
     * console.log("client initialized");
     * // Join a channel
     * //……
     * }, error => {
     *     console.log("client init failed ", err);
     *     // Error handling
     * });
     * @param {?} appId Pass in the App ID for your project.
     * ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.
     * To get your App ID,
     * @param {?=} onSuccess
     * @param {?=} onFailure
     * @return {?}
     */
    function (appId, onSuccess, onFailure) {
        this.client.init(appId, onSuccess, onFailure);
    };
    /**
     * Attempts to automatically collect audio and video devices from the AgoraRTC `getDevices()` method.
     */
    /**
     * Attempts to automatically collect audio and video devices from the AgoraRTC `getDevices()` method.
     * @private
     * @return {?}
     */
    NgxAgoraService.prototype.collectDevices = /**
     * Attempts to automatically collect audio and video devices from the AgoraRTC `getDevices()` method.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.AgoraRTC.getDevices((/**
         * @param {?} devices
         * @return {?}
         */
        function (devices) {
            /** @type {?} */
            var audioDevices = devices.filter((/**
             * @param {?} device
             * @return {?}
             */
            function (device) {
                return device.kind === 'audioinput' && device.deviceId !== 'default';
            }));
            /** @type {?} */
            var videoDevices = devices.filter((/**
             * @param {?} device
             * @return {?}
             */
            function (device) {
                return device.kind === 'videoinput' && device.deviceId !== 'default';
            }));
            _this.audioDevices = audioDevices;
            _this.videoDevices = videoDevices;
        }));
    };
    NgxAgoraService.AgoraRTC = agoraSDK;
    NgxAgoraService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgxAgoraService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: ['config',] }] }
    ]; };
    /** @nocollapse */ NgxAgoraService.ngInjectableDef = defineInjectable({ factory: function NgxAgoraService_Factory() { return new NgxAgoraService(inject("config")); }, token: NgxAgoraService, providedIn: "root" });
    return NgxAgoraService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxAgoraComponent = /** @class */ (function () {
    function NgxAgoraComponent() {
    }
    /**
     * @return {?}
     */
    NgxAgoraComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    NgxAgoraComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-ngx-agora',
                    template: "\n    <p>\n      ngx-agora works!\n    </p>\n  "
                }] }
    ];
    /** @nocollapse */
    NgxAgoraComponent.ctorParameters = function () { return []; };
    return NgxAgoraComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxAgoraModule = /** @class */ (function () {
    function NgxAgoraModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    NgxAgoraModule.forRoot = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: NgxAgoraModule,
            providers: [NgxAgoraService, { provide: 'config', useValue: config }]
        };
    };
    NgxAgoraModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [NgxAgoraComponent],
                    exports: [NgxAgoraComponent]
                },] }
    ];
    return NgxAgoraModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ClientEvent = {
    LocalStreamPublished: 'stream-published',
    RemoteStreamAdded: 'stream-added',
    RemoteStreamRemoved: 'stream-removed',
    /** Occurs when a user subscribes to a remote stream. */
    RemoteStreamSubscribed: 'stream-subscribed',
    /**
     * Occurs when the peer user leaves the channel;for example, the peer user calls
     * [Client.leave](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#leave).
     */
    PeerLeave: 'peer-leave',
    RemoteAudioMuted: 'mute-audio',
    RemoteAudioUnmuted: 'unmute-audio',
    RemoveVideoMuted: 'mute-video',
    RemoteVideoUnmuted: 'unmute-video',
    /** Occurs when an error message is reported and requires error handling.
     * For details, @see [Error Codes and Warning Codes](https://docs.agora.io/en/Video/the_error_web).
     */
    Error: 'error',
    /** This callback notifies the peer user that he/she is banned from the channel. Only the banned users receive this callback. */
    LocalClientBanned: 'client-banned',
    /** This callback notifies the application who is the active speaker in the channel. */
    ActiveSpeaker: 'active-speaker',
    /**
     * This callback notifies the application of all the speaking remote users and their volumes.
     *
     * It is disabled by default. You can enable this event by calling enableAudioVolumeIndicator.
     * If enabled, it reports the volumes every two seconds regardless of whether there are users speaking.
     *
     * The volume is an integer ranging from 0 to 100. Usually a user with volume above five will be countedas a speaking user.
     */
    VolumeIndicator: 'volume-indicator',
    LiveStreamingStarted: 'liveStreamingStarted',
    LiveStreamingFailed: 'liveStreamingFailed',
    LiveStreamingStopped: 'liveStreamingStopped',
    /** Occurs when the live transcoding setting is updated. */
    LiveTranscodingUpdated: 'liveTranscodingUpdated',
    StreamInjectedStatusUpdated: 'streamInjectedStatus',
    /**
     * Occurs when the Token expires in 30 seconds.
     *
     * You should request a new Token from your server and call
     * [Client.renewToken](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#renewtoken).
     */
    TokenPrivelegeWillExpire: 'onTokenPrivilegeWillExpire',
    /**
     * Occurs when the Token expires.
     *
     * You should request a new Token from your server and call
     * [Client.renewToken](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#renewtoken).
     */
    TokenPrivelegeExpired: 'onTokenPrivilegeDidExpire',
    NetworkTypeChanged: 'network-type-changed',
    RecordingDeviceChanged: 'recording-device-changed',
    /**
     * Occurs when an audio output device is added or removed.
     * @remark
     * Only supports Chrome 49+.
     */
    AudioOutputDeviceChanged: 'playout-device-changed',
    /** Occurs when a camera is added or removed. */
    CameraChanged: 'camera-changed',
    /**
     * Occurs when the type of a video stream changes.
     * It happens when a high-video stream changes to a low-video stream, or vice versa.
     *
     * The stream type (streamType):
     * - 0: High-bitrate, high-resolution video stream.
     * - 1: Low-bitrate, low-resolution video stream.
     */
    StreamTypeChanged: 'stream-type-changed',
    /**
     * Occurs when the network connection state changes.
     *
     * The connection between the SDK and Agora's edge server has the following states:
     *
     * - DISCONNECTED: The SDK is disconnected from Agora's edge server.
     *   This is the initial state before Client.join.
     *   The SDK also enters this state after the app calls Client.leave.
     * - CONNECTING: The SDK is connecting to Agora's edge server. The SDK enters this state when calling Client.join or
     *   reconnecting to Agora's edge server automatically after the connection is lost.
     * - CONNECTED: The SDK is connected to Agora's edge server and joins a channel. You can now publish or subscribe to a stream
     *   in the channel. If the connection is lost because, for example, the network is down or switched, the SDK triggers this callback
     *   and notifies the app that the state changes from CONNECTED to CONNECTING.
     * - DISCONNECTING: The SDK is disconnecting from Agora's edge server. The SDK enters this state when calling Client.leave.
     */
    ConnectionStateChanged: 'connection-state-change',
    /** Occurs when the SDK starts republishing or re-subscribing to a stream. */
    StreamReconnectionStart: 'stream-reconnect-start',
    /** Occurs when the SDK finishes republishing or re-subscribing to a stream. */
    StreamReconnectionEnd: 'stream-reconnect-end',
    /** Occurs when the user role switches in a live broadcast. For example, from a host to an audience or vice versa. */
    ClientRoleChanged: 'client-role-changed',
    /**
     * Occurs when a remote user or host joins the channel.
     * - Communication channel (rtc mode): This callback notifies the app that another user joins the channel.
     *   If other users are already in the channel, the SDK also reports to the app on the existing users.
     * - Live-broadcast channel (live mode): This callback notifies the app that the host joins the channel.
     *   If other hosts are already in the channel, the SDK also reports to the app on the existing hosts.
     *   Agora recommends limiting the number of hosts to 17.
     */
    PeerOnline: 'peer-online',
    /**
     * Reports the network quality of the local user once every two seconds.
     *
     * This callback reports on the uplink and downlink network conditions of the local user.
     *
     * @remark
     * This is an experimental feature and the network quality rating is for reference only.
     */
    NetworkQualityReported: 'network-quality',
    /**
     * Occurs when the remote video stream falls back to an audio-only stream due to unreliable network
     * conditions or switches back to the video after the network conditions improve.
     *
     * If you set `fallbackType` as 2 in
     * [setStreamFallbackOption](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#setstreamfallbackoption),
     * the SDK triggers this callback when the remote media stream falls back to audio only due to unreliable network conditions
     * or switches back to the video after the network condition improves.
     *
     * @remark
     * Once the remote media stream is switched to the low stream due to unreliable network conditions, you can monitor
     * the stream switch between a high stream and low stream in the stream-type-changed callback.
     */
    StreamFallback: 'stream-fallback',
    /** Occurs when a remote stream adds or removes a track. */
    StreamUpdated: 'stream-updated',
    /**
     * Reports exception events in the channel.
     * Exceptions are not errors, but usually mean quality issues.
     * This callback also reports recovery from an exception.
     * Each exception event has a corresponding recovery event
     * @see https://web-cdn.agora.io/docs-files/1547180053430 for details
     */
    Exception: 'exception',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var CodecType = {
    Opus: '1',
    AAC: '2',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var LogLevel = {
    /** Outputs all logs. */
    Debug: 0,
    /** Outputs logs of the INFO, WARNING and ERROR levels. */
    Info: 1,
    /** Outputs logs of the WARNING and ERROR levels. */
    Warning: 2,
    /** Outputs logs of the ERROR level. */
    Error: 3,
    /** Outputs no logs. */
    None: 4,
};
LogLevel[LogLevel.Debug] = 'Debug';
LogLevel[LogLevel.Info] = 'Info';
LogLevel[LogLevel.Warning] = 'Warning';
LogLevel[LogLevel.Error] = 'Error';
LogLevel[LogLevel.None] = 'None';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var MuteState = {
    Unmuted: '0',
    Muted: '1',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var StreamEvent = {
    /** Occurs when the user gives access to the camera and microphone. */
    MediaAccessAllowed: 'accessAllowed',
    /** Occurs when the user denies access to the camera and microphone. */
    MediaAccessDenied: 'accessDenied',
    /** Occurs when screen-sharing stops. */
    ScreenSharingStopped: 'stopScreenSharing',
    /**
     * Occurs when the audio mixing stream playback starts/resumes.
     *
     * @remarks
     * This callback is triggered when the audio mixing stream is loaded and starts playing,
     * or when the paused audio mixing stream resumes playing.
     */
    AudioMixingPlayed: 'audioMixingPlayed',
    /** Occurs when the last audio mixing stream playback finishes. */
    AudioMixingFinished: 'audioMixingFinished',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxAgoraService, NgxAgoraModule, ClientEvent, CodecType, LogLevel, MuteState, StreamEvent, NgxAgoraComponent as ɵb };

//# sourceMappingURL=ngx-agora.js.map