/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Options for playing an Agora.io media stream.
 * @record
 */
export function VideoPlayOptions() { }
if (false) {
    /**
     * Video display mode:
     * - `'cover'`: Uniformly scale the video until it fills the visible boundaries (cropped).
     *   One dimension of the video may have clipped contents. Refer to the cover option of object-fit in CSS.
     * - `'contain'`: Uniformly scale the video until one of its dimension fits the boundary (zoomed to fit).
     *   Areas that are not filled due to the disparity in the aspect ratio will be filled with black.
     *   Refer to the contain option of object-fit in CSS.
     *
     * For local streams, by default the cover mode is used for video playing and the contain mode is used for screen sharing;
     * for remote streams, by default the cover mode is used.
     * @type {?|undefined}
     */
    VideoPlayOptions.prototype.fit;
    /**
     * Sets whether to mute the playing stream.
     *
     * The `muted` flag can be used as a workaround for the browser's autoplay policy.
     *
     * On Chrome 70+ and Safari, a video stream with sound does not play until triggered by a user gesture.
     * If you want to play the video anyway without a user gesture, you can set the muted flag to true, so that the video is
     * automatically played without sound.
     *
     * @see [Autoplay Policy Changes](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes) for more information.
     * @type {?|undefined}
     */
    VideoPlayOptions.prototype.muted;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW8tcGxheS1vcHRpb25zLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWFnb3JhLyIsInNvdXJjZXMiOlsibGliL2RhdGEvbW9kZWxzL3ZpZGVvLXBsYXktb3B0aW9ucy5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUdBLHNDQXlCQzs7Ozs7Ozs7Ozs7Ozs7SUFiQywrQkFBMEI7Ozs7Ozs7Ozs7Ozs7SUFZMUIsaUNBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBPcHRpb25zIGZvciBwbGF5aW5nIGFuIEFnb3JhLmlvIG1lZGlhIHN0cmVhbS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWaWRlb1BsYXlPcHRpb25zIHtcbiAgLyoqXG4gICAqIFZpZGVvIGRpc3BsYXkgbW9kZTpcbiAgICogLSBgJ2NvdmVyJ2A6IFVuaWZvcm1seSBzY2FsZSB0aGUgdmlkZW8gdW50aWwgaXQgZmlsbHMgdGhlIHZpc2libGUgYm91bmRhcmllcyAoY3JvcHBlZCkuXG4gICAqICAgT25lIGRpbWVuc2lvbiBvZiB0aGUgdmlkZW8gbWF5IGhhdmUgY2xpcHBlZCBjb250ZW50cy4gUmVmZXIgdG8gdGhlIGNvdmVyIG9wdGlvbiBvZiBvYmplY3QtZml0IGluIENTUy5cbiAgICogLSBgJ2NvbnRhaW4nYDogVW5pZm9ybWx5IHNjYWxlIHRoZSB2aWRlbyB1bnRpbCBvbmUgb2YgaXRzIGRpbWVuc2lvbiBmaXRzIHRoZSBib3VuZGFyeSAoem9vbWVkIHRvIGZpdCkuXG4gICAqICAgQXJlYXMgdGhhdCBhcmUgbm90IGZpbGxlZCBkdWUgdG8gdGhlIGRpc3Bhcml0eSBpbiB0aGUgYXNwZWN0IHJhdGlvIHdpbGwgYmUgZmlsbGVkIHdpdGggYmxhY2suXG4gICAqICAgUmVmZXIgdG8gdGhlIGNvbnRhaW4gb3B0aW9uIG9mIG9iamVjdC1maXQgaW4gQ1NTLlxuICAgKlxuICAgKiBGb3IgbG9jYWwgc3RyZWFtcywgYnkgZGVmYXVsdCB0aGUgY292ZXIgbW9kZSBpcyB1c2VkIGZvciB2aWRlbyBwbGF5aW5nIGFuZCB0aGUgY29udGFpbiBtb2RlIGlzIHVzZWQgZm9yIHNjcmVlbiBzaGFyaW5nO1xuICAgKiBmb3IgcmVtb3RlIHN0cmVhbXMsIGJ5IGRlZmF1bHQgdGhlIGNvdmVyIG1vZGUgaXMgdXNlZC5cbiAgICovXG4gIGZpdD86ICdjb3ZlcicgfCAnY29udGFpbic7XG4gIC8qKlxuICAgKiBTZXRzIHdoZXRoZXIgdG8gbXV0ZSB0aGUgcGxheWluZyBzdHJlYW0uXG4gICAqXG4gICAqIFRoZSBgbXV0ZWRgIGZsYWcgY2FuIGJlIHVzZWQgYXMgYSB3b3JrYXJvdW5kIGZvciB0aGUgYnJvd3NlcidzIGF1dG9wbGF5IHBvbGljeS5cbiAgICpcbiAgICogT24gQ2hyb21lIDcwKyBhbmQgU2FmYXJpLCBhIHZpZGVvIHN0cmVhbSB3aXRoIHNvdW5kIGRvZXMgbm90IHBsYXkgdW50aWwgdHJpZ2dlcmVkIGJ5IGEgdXNlciBnZXN0dXJlLlxuICAgKiBJZiB5b3Ugd2FudCB0byBwbGF5IHRoZSB2aWRlbyBhbnl3YXkgd2l0aG91dCBhIHVzZXIgZ2VzdHVyZSwgeW91IGNhbiBzZXQgdGhlIG11dGVkIGZsYWcgdG8gdHJ1ZSwgc28gdGhhdCB0aGUgdmlkZW8gaXNcbiAgICogYXV0b21hdGljYWxseSBwbGF5ZWQgd2l0aG91dCBzb3VuZC5cbiAgICpcbiAgICogQHNlZSBbQXV0b3BsYXkgUG9saWN5IENoYW5nZXNdKGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi91cGRhdGVzLzIwMTcvMDkvYXV0b3BsYXktcG9saWN5LWNoYW5nZXMpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgbXV0ZWQ/OiBib29sZWFuO1xufVxuIl19