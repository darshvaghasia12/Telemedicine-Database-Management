/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * The connection statistics of the remote stream.
 * @record
 */
export function RemoteStreamStats() { }
if (false) {
    /**
     * Bytes of the received audio.
     * @type {?}
     */
    RemoteStreamStats.prototype.audioReceiveBytes;
    /**
     * Delay in receiving the audio (ms).
     *
     * Delay from sending to playing the audio, only supported by Chrome for now.
     * @type {?}
     */
    RemoteStreamStats.prototype.audioReceiveDelay;
    /**
     * Packets of the received audio.
     * @type {?}
     */
    RemoteStreamStats.prototype.audioReceivePackets;
    /**
     * Number of lost packets of the received audio.
     * @type {?}
     */
    RemoteStreamStats.prototype.audioReceivePacketsLost;
    /**
     * Delay from sending to receiving data.
     * @type {?}
     */
    RemoteStreamStats.prototype.endToEndDelay;
    /**
     * Bytes of the received video.
     * @type {?}
     */
    RemoteStreamStats.prototype.videoReceiveBytes;
    /**
     * Decode frame rate after the video is received.
     * @type {?}
     */
    RemoteStreamStats.prototype.videoReceiveDecodeFrameRate;
    /**
     * Delay in receiving the video (ms).
     *
     * Delay from sending to playing the video, only supported by Chrome for now.
     * @type {?}
     */
    RemoteStreamStats.prototype.videoReceiveDelay;
    /**
     * Frame rate rof the received video.
     * @type {?}
     */
    RemoteStreamStats.prototype.videoReceiveFrameRate;
    /**
     * Packets of the received video.
     * @type {?}
     */
    RemoteStreamStats.prototype.videoReceivePackets;
    /**
     * Number of lost packets of the received video.
     * @type {?}
     */
    RemoteStreamStats.prototype.videoReceivePacketsLost;
    /**
     * Resolution height of the received video.
     * @type {?|undefined}
     */
    RemoteStreamStats.prototype.videoReceivedResolutionHeight;
    /**
     * Resolution width of the received video.
     * @type {?|undefined}
     */
    RemoteStreamStats.prototype.videoReceivedResolutionWidth;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLXN0cmVhbS1zdGF0cy5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1hZ29yYS8iLCJzb3VyY2VzIjpbImxpYi9kYXRhL21vZGVscy9yZW1vdGUtc3RyZWFtLXN0YXRzLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBS0EsdUNBaUNDOzs7Ozs7SUEvQkMsOENBQTBCOzs7Ozs7O0lBSzFCLDhDQUEwQjs7Ozs7SUFFMUIsZ0RBQTRCOzs7OztJQUU1QixvREFBZ0M7Ozs7O0lBRWhDLDBDQUFzQjs7Ozs7SUFFdEIsOENBQTBCOzs7OztJQUUxQix3REFBb0M7Ozs7Ozs7SUFLcEMsOENBQTBCOzs7OztJQUUxQixrREFBOEI7Ozs7O0lBRTlCLGdEQUE0Qjs7Ozs7SUFFNUIsb0RBQWdDOzs7OztJQUVoQywwREFBdUM7Ozs7O0lBRXZDLHlEQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0cmVhbVN0YXRzIH0gZnJvbSAnLi9zdHJlYW0tc3RhdHMubW9kZWwnO1xuXG4vKipcbiAqIFRoZSBjb25uZWN0aW9uIHN0YXRpc3RpY3Mgb2YgdGhlIHJlbW90ZSBzdHJlYW0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVtb3RlU3RyZWFtU3RhdHMgZXh0ZW5kcyBTdHJlYW1TdGF0cyB7XG4gIC8qKiBCeXRlcyBvZiB0aGUgcmVjZWl2ZWQgYXVkaW8uICovXG4gIGF1ZGlvUmVjZWl2ZUJ5dGVzOiBzdHJpbmc7XG4gIC8qKiBEZWxheSBpbiByZWNlaXZpbmcgdGhlIGF1ZGlvIChtcykuXG4gICAqXG4gICAqIERlbGF5IGZyb20gc2VuZGluZyB0byBwbGF5aW5nIHRoZSBhdWRpbywgb25seSBzdXBwb3J0ZWQgYnkgQ2hyb21lIGZvciBub3cuXG4gICAqL1xuICBhdWRpb1JlY2VpdmVEZWxheTogc3RyaW5nO1xuICAvKiogUGFja2V0cyBvZiB0aGUgcmVjZWl2ZWQgYXVkaW8uICovXG4gIGF1ZGlvUmVjZWl2ZVBhY2tldHM6IHN0cmluZztcbiAgLyoqIE51bWJlciBvZiBsb3N0IHBhY2tldHMgb2YgdGhlIHJlY2VpdmVkIGF1ZGlvLiAqL1xuICBhdWRpb1JlY2VpdmVQYWNrZXRzTG9zdDogc3RyaW5nO1xuICAvKiogRGVsYXkgZnJvbSBzZW5kaW5nIHRvIHJlY2VpdmluZyBkYXRhLiAqL1xuICBlbmRUb0VuZERlbGF5OiBzdHJpbmc7XG4gIC8qKiBCeXRlcyBvZiB0aGUgcmVjZWl2ZWQgdmlkZW8uICovXG4gIHZpZGVvUmVjZWl2ZUJ5dGVzOiBzdHJpbmc7XG4gIC8qKiBEZWNvZGUgZnJhbWUgcmF0ZSBhZnRlciB0aGUgdmlkZW8gaXMgcmVjZWl2ZWQuICovXG4gIHZpZGVvUmVjZWl2ZURlY29kZUZyYW1lUmF0ZTogc3RyaW5nO1xuICAvKiogRGVsYXkgaW4gcmVjZWl2aW5nIHRoZSB2aWRlbyAobXMpLlxuICAgKlxuICAgKiBEZWxheSBmcm9tIHNlbmRpbmcgdG8gcGxheWluZyB0aGUgdmlkZW8sIG9ubHkgc3VwcG9ydGVkIGJ5IENocm9tZSBmb3Igbm93LlxuICAgKi9cbiAgdmlkZW9SZWNlaXZlRGVsYXk6IHN0cmluZztcbiAgLyoqIEZyYW1lIHJhdGUgcm9mIHRoZSByZWNlaXZlZCB2aWRlby4gKi9cbiAgdmlkZW9SZWNlaXZlRnJhbWVSYXRlOiBzdHJpbmc7XG4gIC8qKiBQYWNrZXRzIG9mIHRoZSByZWNlaXZlZCB2aWRlby4gKi9cbiAgdmlkZW9SZWNlaXZlUGFja2V0czogc3RyaW5nO1xuICAvKiogTnVtYmVyIG9mIGxvc3QgcGFja2V0cyBvZiB0aGUgcmVjZWl2ZWQgdmlkZW8uICovXG4gIHZpZGVvUmVjZWl2ZVBhY2tldHNMb3N0OiBzdHJpbmc7XG4gIC8qKiBSZXNvbHV0aW9uIGhlaWdodCBvZiB0aGUgcmVjZWl2ZWQgdmlkZW8uICovXG4gIHZpZGVvUmVjZWl2ZWRSZXNvbHV0aW9uSGVpZ2h0Pzogc3RyaW5nO1xuICAvKiogUmVzb2x1dGlvbiB3aWR0aCBvZiB0aGUgcmVjZWl2ZWQgdmlkZW8uICovXG4gIHZpZGVvUmVjZWl2ZWRSZXNvbHV0aW9uV2lkdGg/OiBzdHJpbmc7XG59XG4iXX0=