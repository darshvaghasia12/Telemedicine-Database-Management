/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * AgoraRTC is the entry point for all the methods that can be called in Agora Web SDK.
 *
 * You can use the AgoraRTC methods to create
 * [Client](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html) and
 * [Stream](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html) objects.
 * Other methods of the AgoraRTC object check for system requirements and set up error logging.
 * @record
 */
export function AgoraRTC() { }
if (false) {
    /**
     * Checks the Web Browser Compatibility
     *
     * This method checks the compatibility between the Web SDK and the current web browser.
     * Use this method before calling createClient to check the compatibility between the system and the web browser.
     *
     * - true: The Web SDK is compatible with the current web browser.
     * - false: The Web SDK is not compatible with the current web browser.
     *
     * \@remark
     * Agora has yet to conduct comprehensive tests on Chromium kernel browsers, such as QQ and 360.
     * Agora will gradually achieve compatibility on most mainstream browsers in subsequent versions of the Web SDK.
     * @type {?}
     */
    AgoraRTC.prototype.checkSystemRequirements;
    /**
     * Creates a Client Object
     *
     * This method creates and returns a client object. You can only call this method once each call session.
     *
     * \@param config
     * Defines the property of the client, see
     * [ClientConfig](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html) for details.
     *
     * \@example
     * AgoraRTC.createClient(config);
     * @type {?}
     */
    AgoraRTC.prototype.createClient;
    /**
     * This method creates and returns a stream object.
     *
     * \@example
     * AgoraRTC.createStream(spec)
     *
     * \@param spec Defines the properties of the stream
     * @see [StreamSpec](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.streamspec.html) for details.
     * @type {?}
     */
    AgoraRTC.prototype.createStream;
    /**
     * This method enumerates the available media input and output devices, such as microphones, cameras, headsets, and so on.
     *
     * If this method succeeds, the SDK returns a list of media devices in an array of `MediaDeviceInfo` objects.
     *
     * \@example
     * AgoraRTC.getDevices(devices => {
     *   const devCount = devices.length;
     *   const id = devices[0].deviceId;
     * });
     * @type {?}
     */
    AgoraRTC.prototype.getDevices;
    /**
     * Gets the Sources for Screen-sharing
     *
     * To share the screen on Electron, call this method to get the screen sources.
     * @see [Share the Screen](https://docs.agora.io/en/Video/screensharing_web?platform=Web#electron) for details.
     *
     * If this method succeeds, the SDK returns a list of screen sources in an array of
     * [DesktopCapturerSource](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.desktopcapturersource.html) objects.
     *
     * \@example
     * AgoraRTC.getScreenSources(function(err, sources) {
     *  console.log(sources)
     * }
     *
     * @type {?}
     */
    AgoraRTC.prototype.getScreenSources;
    /**
     * This method returns the codecs supported by both the Agora Web SDK and the web browser.
     * The Agora Web SDK supports VP8 and H.264 for video, and OPUS for audio.
     *
     * This method supports all web browsers. For web browsers that do not support WebRTC or
     * are not recognized, the returned codec list is empty.
     *
     * \@remark
     * In the `.then(function(result){})` callback, `result` has the following properties:
     * - `video`: array, the supported video codecs. The array might include `'H264'` and `'VP8'`, or be empty.
     * - `audio`: array, the supported audio codecs. The array might include `'OPUS'`, or be empty.
     *
     * \@example
     * // Gets the supported decoding formats as the receiver
     * AgoraRTC.getSupportedCodec()
     *   .then(result => {
     *     console.log(`Supported video codec: ${result.video.join(',')}`);
     *     console.log(`Supported audio codec: ${result.audio.join(',')}`);
     *   });
     *
     * // Gets the supported encoding formats as the sender
     * navigator.mediaDevices.getUserMedia({video: true, audio: true})
     *  .then(mediaStream => {
     *     return AgoraRTC.getSupportedCodec({stream: mediaStream});
     *  })
     *  .then(result => {
     *     console.log(`Supported video codec: ${result.video.join(',')}`);
     *     console.log(`Supported audio codec: ${result.audio.join(',')}`);
     *  });
     * @type {?}
     */
    AgoraRTC.prototype.getSupportedCodec;
    /**
     * Logs connection information and errors to the console during active periods of the Agora.io SDK.
     * @type {?}
     */
    AgoraRTC.prototype.Logger;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdvcmEtcnRjLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWFnb3JhLyIsInNvdXJjZXMiOlsibGliL2RhdGEvbW9kZWxzL2Fnb3JhLXJ0Yy5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBZ0JBLDhCQXFHQzs7Ozs7Ozs7Ozs7Ozs7OztJQXZGQywyQ0FBdUM7Ozs7Ozs7Ozs7Ozs7O0lBYXZDLGdDQUFvRDs7Ozs7Ozs7Ozs7SUFVcEQsZ0NBQTJDOzs7Ozs7Ozs7Ozs7O0lBWTNDLDhCQUFxRTs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFnQnJFLG9DQUFpRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUErQmpGLHFDQUF5Rjs7Ozs7SUFJekYsMEJBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZ29yYUNsaWVudCB9IGZyb20gJy4vYWdvcmEtY2xpZW50Lm1vZGVsJztcbmltcG9ydCB7IENsaWVudENvbmZpZyB9IGZyb20gJy4vY2xpZW50LWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBEZXNrdG9wQ2FwdHVyZXJTb3VyY2UgfSBmcm9tICcuL2Rlc2t0b3AtY2FwdHVyZXItc291cmNlLm1vZGVsJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vbG9nZ2VyLm1vZGVsJztcbmltcG9ydCB7IE1lZGlhU3RyZWFtIH0gZnJvbSAnLi9tZWRpYS1zdHJlYW0ubW9kZWwnO1xuaW1wb3J0IHsgU3RyZWFtU3BlYyB9IGZyb20gJy4vc3RyZWFtLXNwZWMubW9kZWwnO1xuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSAnLi9zdHJlYW0ubW9kZWwnO1xuXG4vKipcbiAqIEFnb3JhUlRDIGlzIHRoZSBlbnRyeSBwb2ludCBmb3IgYWxsIHRoZSBtZXRob2RzIHRoYXQgY2FuIGJlIGNhbGxlZCBpbiBBZ29yYSBXZWIgU0RLLlxuICpcbiAqIFlvdSBjYW4gdXNlIHRoZSBBZ29yYVJUQyBtZXRob2RzIHRvIGNyZWF0ZVxuICogW0NsaWVudF0oaHR0cHM6Ly9kb2NzLmFnb3JhLmlvL2VuL1ZpZGVvL0FQSSUyMFJlZmVyZW5jZS93ZWIvaW50ZXJmYWNlcy9hZ29yYXJ0Yy5jbGllbnQuaHRtbCkgYW5kXG4gKiBbU3RyZWFtXShodHRwczovL2RvY3MuYWdvcmEuaW8vZW4vVmlkZW8vQVBJJTIwUmVmZXJlbmNlL3dlYi9pbnRlcmZhY2VzL2Fnb3JhcnRjLnN0cmVhbS5odG1sKSBvYmplY3RzLlxuICogT3RoZXIgbWV0aG9kcyBvZiB0aGUgQWdvcmFSVEMgb2JqZWN0IGNoZWNrIGZvciBzeXN0ZW0gcmVxdWlyZW1lbnRzIGFuZCBzZXQgdXAgZXJyb3IgbG9nZ2luZy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBZ29yYVJUQyB7XG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIFdlYiBCcm93c2VyIENvbXBhdGliaWxpdHlcbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2hlY2tzIHRoZSBjb21wYXRpYmlsaXR5IGJldHdlZW4gdGhlIFdlYiBTREsgYW5kIHRoZSBjdXJyZW50IHdlYiBicm93c2VyLlxuICAgKiBVc2UgdGhpcyBtZXRob2QgYmVmb3JlIGNhbGxpbmcgY3JlYXRlQ2xpZW50IHRvIGNoZWNrIHRoZSBjb21wYXRpYmlsaXR5IGJldHdlZW4gdGhlIHN5c3RlbSBhbmQgdGhlIHdlYiBicm93c2VyLlxuICAgKlxuICAgKiAtIHRydWU6IFRoZSBXZWIgU0RLIGlzIGNvbXBhdGlibGUgd2l0aCB0aGUgY3VycmVudCB3ZWIgYnJvd3Nlci5cbiAgICogLSBmYWxzZTogVGhlIFdlYiBTREsgaXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGUgY3VycmVudCB3ZWIgYnJvd3Nlci5cbiAgICpcbiAgICogQHJlbWFya1xuICAgKiBBZ29yYSBoYXMgeWV0IHRvIGNvbmR1Y3QgY29tcHJlaGVuc2l2ZSB0ZXN0cyBvbiBDaHJvbWl1bSBrZXJuZWwgYnJvd3NlcnMsIHN1Y2ggYXMgUVEgYW5kIDM2MC5cbiAgICogQWdvcmEgd2lsbCBncmFkdWFsbHkgYWNoaWV2ZSBjb21wYXRpYmlsaXR5IG9uIG1vc3QgbWFpbnN0cmVhbSBicm93c2VycyBpbiBzdWJzZXF1ZW50IHZlcnNpb25zIG9mIHRoZSBXZWIgU0RLLlxuICAgKi9cbiAgY2hlY2tTeXN0ZW1SZXF1aXJlbWVudHM6ICgpID0+IGJvb2xlYW47XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgQ2xpZW50IE9iamVjdFxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjcmVhdGVzIGFuZCByZXR1cm5zIGEgY2xpZW50IG9iamVjdC4gWW91IGNhbiBvbmx5IGNhbGwgdGhpcyBtZXRob2Qgb25jZSBlYWNoIGNhbGwgc2Vzc2lvbi5cbiAgICpcbiAgICogQHBhcmFtIGNvbmZpZ1xuICAgKiBEZWZpbmVzIHRoZSBwcm9wZXJ0eSBvZiB0aGUgY2xpZW50LCBzZWVcbiAgICogW0NsaWVudENvbmZpZ10oaHR0cHM6Ly9kb2NzLmFnb3JhLmlvL2VuL1ZpZGVvL0FQSSUyMFJlZmVyZW5jZS93ZWIvaW50ZXJmYWNlcy9hZ29yYXJ0Yy5jbGllbnRjb25maWcuaHRtbCkgZm9yIGRldGFpbHMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIEFnb3JhUlRDLmNyZWF0ZUNsaWVudChjb25maWcpO1xuICAgKi9cbiAgY3JlYXRlQ2xpZW50OiAoY29uZmlnOiBDbGllbnRDb25maWcpID0+IEFnb3JhQ2xpZW50O1xuICAvKipcbiAgICogVGhpcyBtZXRob2QgY3JlYXRlcyBhbmQgcmV0dXJucyBhIHN0cmVhbSBvYmplY3QuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIEFnb3JhUlRDLmNyZWF0ZVN0cmVhbShzcGVjKVxuICAgKlxuICAgKiBAcGFyYW0gc3BlYyBEZWZpbmVzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBzdHJlYW1cbiAgICogQHNlZSBbU3RyZWFtU3BlY10oaHR0cHM6Ly9kb2NzLmFnb3JhLmlvL2VuL1ZpZGVvL0FQSSUyMFJlZmVyZW5jZS93ZWIvaW50ZXJmYWNlcy9hZ29yYXJ0Yy5zdHJlYW1zcGVjLmh0bWwpIGZvciBkZXRhaWxzLlxuICAgKi9cbiAgY3JlYXRlU3RyZWFtOiAoc3BlYzogU3RyZWFtU3BlYykgPT4gU3RyZWFtO1xuICAvKipcbiAgICogVGhpcyBtZXRob2QgZW51bWVyYXRlcyB0aGUgYXZhaWxhYmxlIG1lZGlhIGlucHV0IGFuZCBvdXRwdXQgZGV2aWNlcywgc3VjaCBhcyBtaWNyb3Bob25lcywgY2FtZXJhcywgaGVhZHNldHMsIGFuZCBzbyBvbi5cbiAgICpcbiAgICogSWYgdGhpcyBtZXRob2Qgc3VjY2VlZHMsIHRoZSBTREsgcmV0dXJucyBhIGxpc3Qgb2YgbWVkaWEgZGV2aWNlcyBpbiBhbiBhcnJheSBvZiBgTWVkaWFEZXZpY2VJbmZvYCBvYmplY3RzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBBZ29yYVJUQy5nZXREZXZpY2VzKGRldmljZXMgPT4ge1xuICAgKiAgIGNvbnN0IGRldkNvdW50ID0gZGV2aWNlcy5sZW5ndGg7XG4gICAqICAgY29uc3QgaWQgPSBkZXZpY2VzWzBdLmRldmljZUlkO1xuICAgKiB9KTtcbiAgICovXG4gIGdldERldmljZXM6IChjYWxsYmFjazogKGRldmljZXM6IE1lZGlhRGV2aWNlSW5mb1tdKSA9PiB2b2lkKSA9PiB2b2lkO1xuICAvKipcbiAgICogR2V0cyB0aGUgU291cmNlcyBmb3IgU2NyZWVuLXNoYXJpbmdcbiAgICpcbiAgICogVG8gc2hhcmUgdGhlIHNjcmVlbiBvbiBFbGVjdHJvbiwgY2FsbCB0aGlzIG1ldGhvZCB0byBnZXQgdGhlIHNjcmVlbiBzb3VyY2VzLlxuICAgKiBAc2VlIFtTaGFyZSB0aGUgU2NyZWVuXShodHRwczovL2RvY3MuYWdvcmEuaW8vZW4vVmlkZW8vc2NyZWVuc2hhcmluZ193ZWI/cGxhdGZvcm09V2ViI2VsZWN0cm9uKSBmb3IgZGV0YWlscy5cbiAgICpcbiAgICogSWYgdGhpcyBtZXRob2Qgc3VjY2VlZHMsIHRoZSBTREsgcmV0dXJucyBhIGxpc3Qgb2Ygc2NyZWVuIHNvdXJjZXMgaW4gYW4gYXJyYXkgb2ZcbiAgICogW0Rlc2t0b3BDYXB0dXJlclNvdXJjZV0oaHR0cHM6Ly9kb2NzLmFnb3JhLmlvL2VuL1ZpZGVvL0FQSSUyMFJlZmVyZW5jZS93ZWIvaW50ZXJmYWNlcy9hZ29yYXJ0Yy5kZXNrdG9wY2FwdHVyZXJzb3VyY2UuaHRtbCkgb2JqZWN0cy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogQWdvcmFSVEMuZ2V0U2NyZWVuU291cmNlcyhmdW5jdGlvbihlcnIsIHNvdXJjZXMpIHtcbiAgICogIGNvbnNvbGUubG9nKHNvdXJjZXMpXG4gICAqIH1cbiAgICpcbiAgICovXG4gIGdldFNjcmVlblNvdXJjZXM6IChjYWxsYmFjazogKHNvdXJjZXM6IERlc2t0b3BDYXB0dXJlclNvdXJjZVtdKSA9PiB2b2lkKSA9PiB2b2lkO1xuICAvKipcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgY29kZWNzIHN1cHBvcnRlZCBieSBib3RoIHRoZSBBZ29yYSBXZWIgU0RLIGFuZCB0aGUgd2ViIGJyb3dzZXIuXG4gICAqIFRoZSBBZ29yYSBXZWIgU0RLIHN1cHBvcnRzIFZQOCBhbmQgSC4yNjQgZm9yIHZpZGVvLCBhbmQgT1BVUyBmb3IgYXVkaW8uXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGFsbCB3ZWIgYnJvd3NlcnMuIEZvciB3ZWIgYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBXZWJSVEMgb3JcbiAgICogYXJlIG5vdCByZWNvZ25pemVkLCB0aGUgcmV0dXJuZWQgY29kZWMgbGlzdCBpcyBlbXB0eS5cbiAgICpcbiAgICogQHJlbWFya1xuICAgKiBJbiB0aGUgYC50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7fSlgIGNhbGxiYWNrLCBgcmVzdWx0YCBoYXMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKiAtIGB2aWRlb2A6IGFycmF5LCB0aGUgc3VwcG9ydGVkIHZpZGVvIGNvZGVjcy4gVGhlIGFycmF5IG1pZ2h0IGluY2x1ZGUgYCdIMjY0J2AgYW5kIGAnVlA4J2AsIG9yIGJlIGVtcHR5LlxuICAgKiAtIGBhdWRpb2A6IGFycmF5LCB0aGUgc3VwcG9ydGVkIGF1ZGlvIGNvZGVjcy4gVGhlIGFycmF5IG1pZ2h0IGluY2x1ZGUgYCdPUFVTJ2AsIG9yIGJlIGVtcHR5LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHZXRzIHRoZSBzdXBwb3J0ZWQgZGVjb2RpbmcgZm9ybWF0cyBhcyB0aGUgcmVjZWl2ZXJcbiAgICogQWdvcmFSVEMuZ2V0U3VwcG9ydGVkQ29kZWMoKVxuICAgKiAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZyhgU3VwcG9ydGVkIHZpZGVvIGNvZGVjOiAke3Jlc3VsdC52aWRlby5qb2luKCcsJyl9YCk7XG4gICAqICAgICBjb25zb2xlLmxvZyhgU3VwcG9ydGVkIGF1ZGlvIGNvZGVjOiAke3Jlc3VsdC5hdWRpby5qb2luKCcsJyl9YCk7XG4gICAqICAgfSk7XG4gICAqXG4gICAqIC8vIEdldHMgdGhlIHN1cHBvcnRlZCBlbmNvZGluZyBmb3JtYXRzIGFzIHRoZSBzZW5kZXJcbiAgICogbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe3ZpZGVvOiB0cnVlLCBhdWRpbzogdHJ1ZX0pXG4gICAqICAudGhlbihtZWRpYVN0cmVhbSA9PiB7XG4gICAqICAgICByZXR1cm4gQWdvcmFSVEMuZ2V0U3VwcG9ydGVkQ29kZWMoe3N0cmVhbTogbWVkaWFTdHJlYW19KTtcbiAgICogIH0pXG4gICAqICAudGhlbihyZXN1bHQgPT4ge1xuICAgKiAgICAgY29uc29sZS5sb2coYFN1cHBvcnRlZCB2aWRlbyBjb2RlYzogJHtyZXN1bHQudmlkZW8uam9pbignLCcpfWApO1xuICAgKiAgICAgY29uc29sZS5sb2coYFN1cHBvcnRlZCBhdWRpbyBjb2RlYzogJHtyZXN1bHQuYXVkaW8uam9pbignLCcpfWApO1xuICAgKiAgfSk7XG4gICAqL1xuICBnZXRTdXBwb3J0ZWRDb2RlYzogKHN1cHBvcnRlZENvZGVjT3B0aW9ucz86IHsgc3RyZWFtPzogTWVkaWFTdHJlYW0gfSkgPT4gUHJvbWlzZTxvYmplY3Q+O1xuICAvKipcbiAgICogTG9ncyBjb25uZWN0aW9uIGluZm9ybWF0aW9uIGFuZCBlcnJvcnMgdG8gdGhlIGNvbnNvbGUgZHVyaW5nIGFjdGl2ZSBwZXJpb2RzIG9mIHRoZSBBZ29yYS5pbyBTREsuXG4gICAqL1xuICBMb2dnZXI6IExvZ2dlcjtcbn1cbiJdfQ==