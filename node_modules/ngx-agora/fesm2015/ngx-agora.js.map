{"version":3,"file":"ngx-agora.js.map","sources":["ng://ngx-agora/lib/ngx-agora.service.ts","ng://ngx-agora/lib/ngx-agora.component.ts","ng://ngx-agora/lib/ngx-agora.module.ts","ng://ngx-agora/lib/data/enums/client-event.enum.ts","ng://ngx-agora/lib/data/enums/codec-type.enum.ts","ng://ngx-agora/lib/data/enums/log-level.enum.ts","ng://ngx-agora/lib/data/enums/mute-state.enum.ts","ng://ngx-agora/lib/data/enums/stream-event.enum.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport * as agoraSDK from 'agora-rtc-sdk';\n\nimport { AgoraClient } from './data/models/agora-client.model';\nimport { AgoraConfig } from './data/models/agora-config.model';\nimport { AgoraRTC, ClientConfig, MediaDeviceInfo, Stream, StreamSpec } from './data/models';\n\n/**\n * Provides access to the Agora web API, including the AgoraRTC and Client objects.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxAgoraService {\n  private static AgoraRTC: AgoraRTC = agoraSDK;\n\n  /**\n   * The local Agora.io Client object.\n   * @see [Web Client](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html)\n   */\n  client: AgoraClient;\n  /**\n   * All audio devices collected from the AgoraRTC `getDevices()` method.\n   * @see [getDevices()](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#getdevices)\n   *\n   */\n  audioDevices: MediaDeviceInfo[] = [];\n  /**\n   * All video devices collected from the AgoraRTC `getDevices()` method.\n   * @see [getDevices()](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#getdevices)\n   */\n  videoDevices: MediaDeviceInfo[] = [];\n  /**\n   * Instance reference to the `static` AgoraRTC library object.\n   */\n  AgoraRTC: AgoraRTC = NgxAgoraService.AgoraRTC;\n\n  constructor(@Inject('config') private config: AgoraConfig) {\n    if (!this.checkSystemRequirements()) {\n      this.AgoraRTC.Logger.error('Web RTC is not supported in this browser');\n    } else {\n      this.collectDevices();\n    }\n  }\n\n  /**\n   * Checks the Web Browser Compatibility\n   *\n   * This method checks the compatibility between the Web SDK and the current web browser.\n   * Use this method before calling createClient to check the compatibility between the system and the web browser.\n   *\n   * - true: The Web SDK is compatible with the current web browser.\n   * - false: The Web SDK is not compatible with the current web browser.\n   *\n   * @remark\n   * Agora has yet to conduct comprehensive tests on Chromium kernel browsers, such as QQ and 360.\n   * Agora will gradually achieve compatibility on most mainstream browsers in subsequent versions of the Web SDK.\n   */\n  checkSystemRequirements(): boolean {\n    return this.AgoraRTC.checkSystemRequirements();\n  }\n\n  /**\n   * Creates a Client object.\n   *\n   * This method creates and returns a client object. You can only call this method once each call session.\n   *\n   * @param config\n   * Defines the property of the client, see\n   * [ClientConfig](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html) for details.\n   * @param [autoInitializing=true] Ngx-agora by default automatically initializes the client with the provided `AppID` after it is created.\n   * Set this property to `false` to disable this functionality, if you are going to call `init()` separately\n   * (after creating the client only).\n   * @param [onSuccess] The callback when the method succeeds.\n   * @param [onFailure] The callback when the method fails.\n   *\n   * @example\n   * AgoraRTC.createClient(config);\n   */\n  createClient(\n    config: ClientConfig,\n    autoInitializing: boolean = true,\n    onSuccess?: () => void,\n    onFailure?: (error: Error) => void\n  ): AgoraClient {\n    this.client = this.AgoraRTC.createClient(config);\n    if (autoInitializing) {\n      this.init(this.config.AppID, onSuccess, onFailure);\n    }\n    return this.client;\n  }\n\n  /**\n   * This method creates and returns a stream object.\n   *\n   * @example\n   * AgoraRTC.createStream(spec)\n   *\n   * @param spec Defines the properties of the stream\n   * @see [StreamSpec](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.streamspec.html) for details.\n   */\n  createStream(spec: StreamSpec): Stream {\n    if (!spec.microphoneId && this.audioDevices && this.audioDevices.length) {\n      const defaultMic = this.audioDevices[0].deviceId;\n      spec.microphoneId = defaultMic;\n    }\n    if (!spec.cameraId && this.videoDevices && this.videoDevices.length) {\n      const defaultCamera = this.videoDevices[0].deviceId;\n      spec.cameraId = spec.cameraId || defaultCamera;\n    }\n\n    return this.AgoraRTC.createStream(spec);\n  }\n\n  /**\n   * Initializes the Client object.\n   *\n   * @param appId Pass in the App ID for your project.\n   * ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.\n   * To get your App ID,\n   * @see [Get an App ID](https://docs.agora.io/en/Video/web_prepare?platform=Web#create-an-agora-account-and-get-an-app-id).\n   * @param [onSuccess] The callback when the method succeeds.\n   * @param [onFailure] The callback when the method fails.\n   *\n   * @example\n   * this.ngxAgoraService.client.init(appId, () => {\n   * console.log(\"client initialized\");\n   * // Join a channel\n   * //â¦â¦\n   * }, error => {\n   *     console.log(\"client init failed \", err);\n   *     // Error handling\n   * });\n   */\n  init(appId: string, onSuccess?: () => void, onFailure?: (error: Error) => void): void {\n    this.client.init(appId, onSuccess, onFailure);\n  }\n\n  /**\n   * Attempts to automatically collect audio and video devices from the AgoraRTC `getDevices()` method.\n   */\n  private collectDevices(): void {\n    this.AgoraRTC.getDevices((devices: MediaDeviceInfo[]) => {\n      const audioDevices = devices.filter(device => {\n        return device.kind === 'audioinput' && device.deviceId !== 'default';\n      });\n\n      const videoDevices = devices.filter(device => {\n        return device.kind === 'videoinput' && device.deviceId !== 'default';\n      });\n\n      this.audioDevices = audioDevices;\n      this.videoDevices = videoDevices;\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ngx-agora',\n  template: `\n    <p>\n      ngx-agora works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgxAgoraComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { AgoraConfig } from './data/models/agora-config.model';\nimport { NgxAgoraComponent } from './ngx-agora.component';\nimport { NgxAgoraService } from './ngx-agora.service';\n\n@NgModule({\n  declarations: [NgxAgoraComponent],\n  exports: [NgxAgoraComponent]\n})\nexport class NgxAgoraModule {\n  static forRoot(config: AgoraConfig): ModuleWithProviders<RouterModule> {\n    return {\n      ngModule: NgxAgoraModule,\n      providers: [NgxAgoraService, { provide: 'config', useValue: config }]\n    };\n  }\n}\n","/**\n * Events that the Agora.io SDK `client.on()` function recognizes.\n *\n * If the API changes faster than the library, a quick type override can help bypass compiler errors:\n *\n * @example\n * this.ngxAgoraService.client.on('new-event' as ClientEvent, (data) => {})\n */\nexport enum ClientEvent {\n  LocalStreamPublished = 'stream-published',\n  RemoteStreamAdded = 'stream-added',\n  RemoteStreamRemoved = 'stream-removed',\n  /** Occurs when a user subscribes to a remote stream. */\n  RemoteStreamSubscribed = 'stream-subscribed',\n  /**\n   * Occurs when the peer user leaves the channel;for example, the peer user calls\n   * [Client.leave](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#leave).\n   */\n  PeerLeave = 'peer-leave',\n  RemoteAudioMuted = 'mute-audio',\n  RemoteAudioUnmuted = 'unmute-audio',\n  RemoveVideoMuted = 'mute-video',\n  RemoteVideoUnmuted = 'unmute-video',\n  /** Occurs when an error message is reported and requires error handling.\n   * For details, @see [Error Codes and Warning Codes](https://docs.agora.io/en/Video/the_error_web).\n   */\n  Error = 'error',\n  /** This callback notifies the peer user that he/she is banned from the channel. Only the banned users receive this callback. */\n  LocalClientBanned = 'client-banned',\n  /** This callback notifies the application who is the active speaker in the channel. */\n  ActiveSpeaker = 'active-speaker',\n  /**\n   * This callback notifies the application of all the speaking remote users and their volumes.\n   *\n   * It is disabled by default. You can enable this event by calling enableAudioVolumeIndicator.\n   * If enabled, it reports the volumes every two seconds regardless of whether there are users speaking.\n   *\n   * The volume is an integer ranging from 0 to 100. Usually a user with volume above five will be countedas a speaking user.\n   */\n  VolumeIndicator = 'volume-indicator',\n  LiveStreamingStarted = 'liveStreamingStarted',\n  LiveStreamingFailed = 'liveStreamingFailed',\n  LiveStreamingStopped = 'liveStreamingStopped',\n  /** Occurs when the live transcoding setting is updated. */\n  LiveTranscodingUpdated = 'liveTranscodingUpdated',\n  StreamInjectedStatusUpdated = 'streamInjectedStatus',\n  /**\n   * Occurs when the Token expires in 30 seconds.\n   *\n   * You should request a new Token from your server and call\n   * [Client.renewToken](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#renewtoken).\n   */\n  TokenPrivelegeWillExpire = 'onTokenPrivilegeWillExpire',\n  /**\n   * Occurs when the Token expires.\n   *\n   * You should request a new Token from your server and call\n   * [Client.renewToken](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#renewtoken).\n   */\n  TokenPrivelegeExpired = 'onTokenPrivilegeDidExpire',\n  NetworkTypeChanged = 'network-type-changed',\n  RecordingDeviceChanged = 'recording-device-changed',\n  /**\n   * Occurs when an audio output device is added or removed.\n   * @remark\n   * Only supports Chrome 49+.\n   */\n  AudioOutputDeviceChanged = 'playout-device-changed',\n  /** Occurs when a camera is added or removed. */\n  CameraChanged = 'camera-changed',\n  /**\n   * Occurs when the type of a video stream changes.\n   * It happens when a high-video stream changes to a low-video stream, or vice versa.\n   *\n   * The stream type (streamType):\n   * - 0: High-bitrate, high-resolution video stream.\n   * - 1: Low-bitrate, low-resolution video stream.\n   */\n  StreamTypeChanged = 'stream-type-changed',\n  /**\n   * Occurs when the network connection state changes.\n   *\n   * The connection between the SDK and Agora's edge server has the following states:\n   *\n   * - DISCONNECTED: The SDK is disconnected from Agora's edge server.\n   *   This is the initial state before Client.join.\n   *   The SDK also enters this state after the app calls Client.leave.\n   * - CONNECTING: The SDK is connecting to Agora's edge server. The SDK enters this state when calling Client.join or\n   *   reconnecting to Agora's edge server automatically after the connection is lost.\n   * - CONNECTED: The SDK is connected to Agora's edge server and joins a channel. You can now publish or subscribe to a stream\n   *   in the channel. If the connection is lost because, for example, the network is down or switched, the SDK triggers this callback\n   *   and notifies the app that the state changes from CONNECTED to CONNECTING.\n   * - DISCONNECTING: The SDK is disconnecting from Agora's edge server. The SDK enters this state when calling Client.leave.\n   */\n  ConnectionStateChanged = 'connection-state-change',\n  /** Occurs when the SDK starts republishing or re-subscribing to a stream. */\n  StreamReconnectionStart = 'stream-reconnect-start',\n  /** Occurs when the SDK finishes republishing or re-subscribing to a stream. */\n  StreamReconnectionEnd = 'stream-reconnect-end',\n  /** Occurs when the user role switches in a live broadcast. For example, from a host to an audience or vice versa. */\n  ClientRoleChanged = 'client-role-changed',\n  /**\n   * Occurs when a remote user or host joins the channel.\n   * - Communication channel (rtc mode): This callback notifies the app that another user joins the channel.\n   *   If other users are already in the channel, the SDK also reports to the app on the existing users.\n   * - Live-broadcast channel (live mode): This callback notifies the app that the host joins the channel.\n   *   If other hosts are already in the channel, the SDK also reports to the app on the existing hosts.\n   *   Agora recommends limiting the number of hosts to 17.\n   */\n  PeerOnline = 'peer-online',\n  /**\n   * Reports the network quality of the local user once every two seconds.\n   *\n   * This callback reports on the uplink and downlink network conditions of the local user.\n   *\n   * @remark\n   * This is an experimental feature and the network quality rating is for reference only.\n   */\n  NetworkQualityReported = 'network-quality',\n  /**\n   * Occurs when the remote video stream falls back to an audio-only stream due to unreliable network\n   * conditions or switches back to the video after the network conditions improve.\n   *\n   * If you set `fallbackType` as 2 in\n   * [setStreamFallbackOption](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#setstreamfallbackoption),\n   * the SDK triggers this callback when the remote media stream falls back to audio only due to unreliable network conditions\n   * or switches back to the video after the network condition improves.\n   *\n   * @remark\n   * Once the remote media stream is switched to the low stream due to unreliable network conditions, you can monitor\n   * the stream switch between a high stream and low stream in the stream-type-changed callback.\n   */\n  StreamFallback = 'stream-fallback',\n  /** Occurs when a remote stream adds or removes a track. */\n  StreamUpdated = 'stream-updated',\n  /**\n   * Reports exception events in the channel.\n   * Exceptions are not errors, but usually mean quality issues.\n   * This callback also reports recovery from an exception.\n   * Each exception event has a corresponding recovery event\n   * @see https://web-cdn.agora.io/docs-files/1547180053430 for details\n   */\n  Exception = 'exception'\n}\n","export enum CodecType {\n  Opus = '1',\n  AAC = '2'\n}\n","/**\n * Allowed logging levels for the AgoraRTC.Logger module.\n */\nexport enum LogLevel {\n  /** Outputs all logs. */\n  Debug,\n  /** Outputs logs of the INFO, WARNING and ERROR levels. */\n  Info,\n  /** Outputs logs of the WARNING and ERROR levels. */\n  Warning,\n  /** Outputs logs of the ERROR level. */\n  Error,\n  /** Outputs no logs. */\n  None\n}\n","export enum MuteState {\n  Unmuted = '0',\n  Muted = '1'\n}\n","/**\n * /**\n * Events that the Agora.io SDK `Stream.on()` function recognizes.\n *\n * If the API changes faster than the library, a quick type override can help bypass compiler errors:\n *\n * @example\n * localStream.on('new-event' as ClientEvent, (data) => {})\n */\nexport enum StreamEvent {\n  /** Occurs when the user gives access to the camera and microphone. */\n  MediaAccessAllowed = 'accessAllowed',\n  /** Occurs when the user denies access to the camera and microphone. */\n  MediaAccessDenied = 'accessDenied',\n  /** Occurs when screen-sharing stops. */\n  ScreenSharingStopped = 'stopScreenSharing',\n  /**\n   * Occurs when the audio mixing stream playback starts/resumes.\n   *\n   * @remarks\n   * This callback is triggered when the audio mixing stream is loaded and starts playing,\n   * or when the paused audio mixing stream resumes playing.\n   */\n  AudioMixingPlayed = 'audioMixingPlayed',\n  /** Occurs when the last audio mixing stream playback finishes. */\n  AudioMixingFinished = 'audioMixingFinished'\n}\n"],"names":[],"mappings":";;;;;;;AAAA;;;AAaA,MAAa,eAAe;;;;IAwB1B,YAAsC,MAAmB;QAAnB,WAAM,GAAN,MAAM,CAAa;;;;;;QAXzD,iBAAY,GAAsB,EAAE,CAAC;;;;;QAKrC,iBAAY,GAAsB,EAAE,CAAC;;;;QAIrC,aAAQ,GAAa,eAAe,CAAC,QAAQ,CAAC;QAG5C,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE;YACnC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;SACxE;aAAM;YACL,IAAI,CAAC,cAAc,EAAE,CAAC;SACvB;KACF;;;;;;;;;;;;;;;IAeD,uBAAuB;QACrB,OAAO,IAAI,CAAC,QAAQ,CAAC,uBAAuB,EAAE,CAAC;KAChD;;;;;;;;;;;;;;;;IAmBD,YAAY,CACV,MAAoB,EACpB,mBAA4B,IAAI,EAChC,SAAsB,EACtB,SAAkC;QAElC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACjD,IAAI,gBAAgB,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;SACpD;QACD,OAAO,IAAI,CAAC,MAAM,CAAC;KACpB;;;;;;;;;;;IAWD,YAAY,CAAC,IAAgB;QAC3B,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;;kBACjE,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,QAAQ;YAChD,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC;SAChC;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;;kBAC7D,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,QAAQ;YACnD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,aAAa,CAAC;SAChD;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;KACzC;;;;;;;;;;;;;;;;;;;;;IAsBD,IAAI,CAAC,KAAa,EAAE,SAAsB,EAAE,SAAkC;QAC5E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;KAC/C;;;;;;IAKO,cAAc;QACpB,IAAI,CAAC,QAAQ,CAAC,UAAU;;;;QAAC,CAAC,OAA0B;;kBAC5C,YAAY,GAAG,OAAO,CAAC,MAAM;;;;YAAC,MAAM;gBACxC,OAAO,MAAM,CAAC,IAAI,KAAK,YAAY,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS,CAAC;aACtE,EAAC;;kBAEI,YAAY,GAAG,OAAO,CAAC,MAAM;;;;YAAC,MAAM;gBACxC,OAAO,MAAM,CAAC,IAAI,KAAK,YAAY,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS,CAAC;aACtE,EAAC;YAEF,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;YACjC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;SAClC,EAAC,CAAC;KACJ;;AA5Ic,wBAAQ,GAAa,QAAQ,CAAC;;YAJ9C,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;4CAyBc,MAAM,SAAC,QAAQ;;;;;;;;ACrC9B,MAWa,iBAAiB;IAE5B,iBAAiB;;;;IAEjB,QAAQ;KACP;;;YAdF,SAAS,SAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,QAAQ,EAAE;;;;GAIT;aAEF;;;;;;;;;ACVD,MAWa,cAAc;;;;;IACzB,OAAO,OAAO,CAAC,MAAmB;QAChC,OAAO;YACL,QAAQ,EAAE,cAAc;YACxB,SAAS,EAAE,CAAC,eAAe,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;SACtE,CAAC;KACH;;;YAVF,QAAQ,SAAC;gBACR,YAAY,EAAE,CAAC,iBAAiB,CAAC;gBACjC,OAAO,EAAE,CAAC,iBAAiB,CAAC;aAC7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICDC,sBAAuB,kBAAkB;IACzC,mBAAoB,cAAc;IAClC,qBAAsB,gBAAgB;;IAEtC,wBAAyB,mBAAmB;;;;;IAK5C,WAAY,YAAY;IACxB,kBAAmB,YAAY;IAC/B,oBAAqB,cAAc;IACnC,kBAAmB,YAAY;IAC/B,oBAAqB,cAAc;;;;IAInC,OAAQ,OAAO;;IAEf,mBAAoB,eAAe;;IAEnC,eAAgB,gBAAgB;;;;;;;;;IAShC,iBAAkB,kBAAkB;IACpC,sBAAuB,sBAAsB;IAC7C,qBAAsB,qBAAqB;IAC3C,sBAAuB,sBAAsB;;IAE7C,wBAAyB,wBAAwB;IACjD,6BAA8B,sBAAsB;;;;;;;IAOpD,0BAA2B,4BAA4B;;;;;;;IAOvD,uBAAwB,2BAA2B;IACnD,oBAAqB,sBAAsB;IAC3C,wBAAyB,0BAA0B;;;;;;IAMnD,0BAA2B,wBAAwB;;IAEnD,eAAgB,gBAAgB;;;;;;;;;IAShC,mBAAoB,qBAAqB;;;;;;;;;;;;;;;;IAgBzC,wBAAyB,yBAAyB;;IAElD,yBAA0B,wBAAwB;;IAElD,uBAAwB,sBAAsB;;IAE9C,mBAAoB,qBAAqB;;;;;;;;;IASzC,YAAa,aAAa;;;;;;;;;IAS1B,wBAAyB,iBAAiB;;;;;;;;;;;;;;IAc1C,gBAAiB,iBAAiB;;IAElC,eAAgB,gBAAgB;;;;;;;;IAQhC,WAAY,WAAW;;;;;;;;;IC7IvB,MAAO,GAAG;IACV,KAAM,GAAG;;;;;;;;;;ICGT,QAAK;;IAEL,OAAI;;IAEJ,UAAO;;IAEP,QAAK;;IAEL,OAAI;;;;;;;;;;;;;;ICZJ,SAAU,GAAG;IACb,OAAQ,GAAG;;;;;;;;;;ICSX,oBAAqB,eAAe;;IAEpC,mBAAoB,cAAc;;IAElC,sBAAuB,mBAAmB;;;;;;;;IAQ1C,mBAAoB,mBAAmB;;IAEvC,qBAAsB,qBAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
