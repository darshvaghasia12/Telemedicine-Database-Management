{"version":3,"file":"angularfire2.js","sourceRoot":"","sources":["../../../src/core/angularfire2.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken, NgZone } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { Observable, Subscription, queueScheduler as queue } from 'rxjs';\n\n// Put in database.ts when we drop database-depreciated\n// SEMVER drop RealtimeDatabaseURL in favor of DATABASE_URL in next major\nexport const RealtimeDatabaseURL = new InjectionToken<string>('angularfire2.realtimeDatabaseURL');\nexport const DATABASE_URL = RealtimeDatabaseURL;\n\nexport class FirebaseZoneScheduler {\n  constructor(public zone: NgZone, private platformId: Object) {}\n  schedule(...args: any[]): Subscription {\n    return <Subscription>this.zone.runGuarded(function() { return queue.schedule.apply(queue, args)});\n  }\n  // TODO this is a hack, clean it up\n  keepUnstableUntilFirst<T>(obs$: Observable<T>) {\n    if (isPlatformServer(this.platformId)) {\n      return new Observable<T>(subscriber => {\n        const noop = () => {};\n        const task = Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop);\n        obs$.subscribe(\n          next => {\n            if (task.state === 'scheduled') { task.invoke() };\n            subscriber.next(next);\n          },\n          error => {\n            if (task.state === 'scheduled') { task.invoke() }\n            subscriber.error(error);\n          },\n          () => {\n            if (task.state === 'scheduled') { task.invoke() }\n            subscriber.complete();\n          }\n        );\n      });\n    } else {\n      return obs$;\n    }\n  }\n  runOutsideAngular<T>(obs$: Observable<T>): Observable<T> {\n    return new Observable<T>(subscriber => {\n      return this.zone.runOutsideAngular(() => {\n        return obs$.subscribe(\n          value => this.zone.run(() => subscriber.next(value)),\n          error => this.zone.run(() => subscriber.error(error)),\n          ()    => this.zone.run(() => subscriber.complete()),\n        );\n      });\n    });\n  }\n}\n\nexport const runOutsideAngular = (zone: NgZone) => <T>(obs$: Observable<T>): Observable<T> => {\n  return new Observable<T>(subscriber => {\n    return zone.runOutsideAngular(() => {\n      runInZone(zone)(obs$).subscribe(subscriber);\n    });\n  });\n}\n\nexport const runInZone = (zone: NgZone) => <T>(obs$: Observable<T>): Observable<T> => {\n  return new Observable<T>(subscriber => {\n    return obs$.subscribe(\n      value => zone.run(() => subscriber.next(value)),\n      error => zone.run(() => subscriber.error(error)),\n      ()    => zone.run(() => subscriber.complete()),\n    );\n  });\n}\n\n//SEMVER: once we move to TypeScript 3.6, we can use these to build lazy interfaces\n/*\n  type FunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T];\n  type PromiseReturningFunctionPropertyNames<T> = { [K in FunctionPropertyNames<T>]: ReturnType<T[K]> extends Promise<any> ? K : never }[FunctionPropertyNames<T>];\n  type NonPromiseReturningFunctionPropertyNames<T> = { [K in FunctionPropertyNames<T>]: ReturnType<T[K]> extends Promise<any> ? never : K }[FunctionPropertyNames<T>];\n  type NonFunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T];\n\n  export type PromiseProxy<T> = { [K in NonFunctionPropertyNames<T>]: Promise<T[K]> } &\n    { [K in NonPromiseReturningFunctionPropertyNames<T>]: (...args: Parameters<T[K]>) => Promise<ReturnType<T[K]>> } &\n    { [K in PromiseReturningFunctionPropertyNames<T>   ]: (...args: Parameters<T[K]>) => ReturnType<T[K]> };\n*/\n\n// DEBUG quick debugger function for inline logging that typescript doesn't complain about\n//       wrote it for debugging the ɵlazySDKProxy, commenting out for now; should consider exposing a\n//       verbose mode for AngularFire in a future release that uses something like this in multiple places\n//       usage: () => log('something') || returnValue\n// const log = (...args: any[]): false => { console.log(...args); return false }\n\n// The problem here are things like ngOnDestroy are missing, then triggering the service\n// rather than dig too far; I'm capturing these as I go.\nconst noopFunctions = ['ngOnDestroy'];\n\n// INVESTIGATE should we make the Proxy revokable and do some cleanup?\n//             right now it's fairly simple but I'm sure this will grow in complexity\nexport const ɵlazySDKProxy = (klass: any, observable: Observable<any>, zone: NgZone) => {\n  return new Proxy(klass, {\n    get: (_, name:string) => zone.runOutsideAngular(() => {\n      if (klass[name]) { return klass[name] }\n      if (noopFunctions.includes(name)) { return () => {} }\n      let promise = observable.toPromise().then(mod => {\n        const ret = mod && mod[name];\n        // TODO move to proper type guards\n        if (typeof ret == 'function') {\n          return ret.bind(mod);\n        } else if (ret && ret.then) {\n          return ret.then((res:any) => zone.run(() => res));\n        } else {\n          return zone.run(() => ret);\n        }\n      });\n      // recurse the proxy\n      return new Proxy(() => undefined, {\n          get: (_, name) => promise[name],\n          // TODO handle callbacks as transparently as I can \n          apply: (self, _, args) => promise.then(it => it && it(...args))\n        }\n      )\n    })\n  })\n};"]}